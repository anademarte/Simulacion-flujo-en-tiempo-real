from PyQt5 import QtWidgets, QtCore
from pyqtgraph import PlotWidget, plot
import pyqtgraph as pg
import sys  # We need sys so that we can pass argv to QApplication
import os
from random import randint
import math
import numpy as np
from matplotlib import pyplot as plt
import time as tt



class MainWindow(QtWidgets.QMainWindow):

    def _init_(self, *args, **kwargs):
        super(MainWindow, self)._init_(*args, **kwargs)

        self.graphWidget = pg.PlotWidget()
        self.setCentralWidget(self.graphWidget)

        self.x = list(range(100))  # 100 time points
        
        self.y = list(range(100))
        self.f=10
        self.frecuencia=0
        self.g=0.05
        self.ga=0
        self.q=[]
        self.t = np.arange(1, 101,1)
        
        for h in range(0,len(self.t)):
            self.ga+=self.g
            self.frecuencia=((math.sqrt(self.ga*self.f))*4.0)
            if self.frecuencia >= self.f:
                self.frecuencia=self.f
            self.q.append(self.frecuencia)
        
        # 100 data points

       

        self.graphWidget.setBackground('w')

        pen = pg.mkPen(color=(255, 0, 0))
        self.data_line =  self.graphWidget.plot(self.x, self.y, pen=pen)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()

        
    def update_plot_data(self):

          # Add a new value 1 higher than the last.

          # Remove the first
        for i in range(0,99):
            
            self.x = self.x[1:]  # Remove the first y element.
            self.x.append(self.t[i])
            self.y = self.y[1:]
            self.y.append(self.q[i])  # Add a new random value.
            self.data_line.setData(self.x, self.y)  # Update the data
    

        



app = QtWidgets.QApplication(sys.argv)
w = MainWindow()
w.show()
sys.exit(app.exec_())
